////c++两大编程思想
///*1.面向对象
//2.泛型编程
//这两大编程思想的目的都是为了提高代码的复用性
//*/
//
///*面向对象的三大特性：封装，继承，多态*/
///*泛型编程的函数模板和类模板*/
//
///*可以看出来都是在针对函数或者类对象的一系列复用
//但是大多数时候，都会有被迫做大量重复工作的情况
//因此为了建立一套统一的数据结构和算法标准，STL诞生了*/
//
///*STL即 standard template library，标准模板库
//STL从广义上分为：容器（container），算法（algorithm），和迭代器（iterator）*/
//
////而算法和容器之间，和迭代器无缝衔接
////STL几乎所有代码都采用了类模板和函数模板
//
///*STL的六大组件*/
////1.容器container，各种数据结构，如vector，list，deque，set，map等
//STL 容器就是将一些运用最广泛的数据结构实现出来
//比如：数组，链表，树，栈，队列，集合，映射表，等等；
//这些容器分为序列式容器和关联式容器两种：
//序列式容器强调值的排序，其中的每个元素都有固定的位置
//关联式容器是二叉树结构，各元素之间没有严格的物理顺序关系。
//
////2.算法algorithm，常用算法，sort，find，copy，for_each//
//有限的步骤，解决逻辑或者数学上的一些问题。
//算法分为质变算法和非质变算法
//质变算法，是指运算过程中会更改区间内元素的内容的算法，比如拷贝，替换，删除等。
//非质变算法，是指运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值等。
//
////3.迭代器iterator,衔接算法和容器
//提供一种方法，使程序员能够依次访问某个容器中的各个元素，而又不需要暴露容器的内部表达方式
//每个容器都有自己的专属迭代器
//迭代器的使用非常类似指针，初学阶段可以把迭代器默认为类似指针的东西。
//主要分为五种，
//输入迭代器，对数据进行只读访问，只读，支持++，==，！=
//输出迭代器，对数据进行只写访问，只写，支持++
//前向迭代器，读写操作，并且能够向前推进迭代器，读写，支持++，==，！=
//
//双向迭代器，读写操作，并且能向前向后操作，读写，支持++，--
//随机访问迭代器，读写操作，可以跳跃的访问任意数据，是功能性最强的迭代器
//读写，支持++，--，[n],-n,<,<=,>,>=
//现阶段接触的迭代器基本都是双向迭代器或者随机访问迭代器。
//
////4.仿函数，行为类似函数，可作为算法的某种策略
////5.适配器，修饰容器或者仿函数或者迭代器接口的东西
////6.空间配置器，负责空间的配置和管理

